-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ws2812 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    stream_TVALID : IN STD_LOGIC;
    stream_TREADY : OUT STD_LOGIC;
    stream_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of ws2812 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ws2812,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.856000,HLS_SYN_LAT=26920,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3973,HLS_SYN_LUT=5318}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_17 : STD_LOGIC_VECTOR (7 downto 0) := "00010111";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv13_1388 : STD_LOGIC_VECTOR (12 downto 0) := "1001110001000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_V_data_V_0_data_out : STD_LOGIC_VECTOR (255 downto 0);
    signal stream_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (255 downto 0);
    signal stream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (255 downto 0);
    signal stream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_V_data_V_0_sel : STD_LOGIC;
    signal stream_V_data_V_0_load_A : STD_LOGIC;
    signal stream_V_data_V_0_load_B : STD_LOGIC;
    signal stream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_V_last_V_0_vld_in : STD_LOGIC;
    signal stream_V_last_V_0_vld_out : STD_LOGIC;
    signal stream_V_last_V_0_ack_in : STD_LOGIC;
    signal stream_V_last_V_0_ack_out : STD_LOGIC;
    signal stream_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_V_last_V_0_sel : STD_LOGIC;
    signal stream_V_last_V_0_load_A : STD_LOGIC;
    signal stream_V_last_V_0_load_B : STD_LOGIC;
    signal stream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_V_dest_V_0_vld_in : STD_LOGIC;
    signal stream_V_dest_V_0_ack_out : STD_LOGIC;
    signal stream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal odd_column : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_data_V_reg_470 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_last_V_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal odd_column_load_load_fu_183_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal odd_column_load_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_193_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_490 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_30_fu_281_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_reg_495 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_291_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_33_reg_500 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_12_fu_387_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_reg_508 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_297_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_397_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_15_reg_513 : STD_LOGIC_VECTOR (255 downto 0);
    signal i_3_fu_403_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_518 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_428_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_36_reg_528 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_18_fu_447_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_reg_533 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_5_fu_458_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_ws2812_led_fu_168_ap_start : STD_LOGIC;
    signal grp_ws2812_led_fu_168_ap_done : STD_LOGIC;
    signal grp_ws2812_led_fu_168_ap_idle : STD_LOGIC;
    signal grp_ws2812_led_fu_168_ap_ready : STD_LOGIC;
    signal grp_ws2812_led_fu_168_led_V : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_ws2812_led_fu_168_out_V : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ws2812_led_fu_168_out_V_ap_vld : STD_LOGIC;
    signal i_reg_124 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i1_reg_135 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i2_reg_146 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal odd_column_new_reg_157 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_ws2812_led_fu_168_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_19_fu_199_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Lo_assign_fu_203_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Hi_assign_fu_211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_223_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_227_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_252_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_231_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_25_fu_246_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_fu_258_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_273_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_fu_266_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_31_fu_287_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_1_fu_305_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Lo_assign_2_fu_309_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Hi_assign_2_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_329_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_346_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_337_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_7_fu_352_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_364_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_379_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_372_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_13_fu_393_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_32_fu_414_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_34_fu_417_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_s_fu_423_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_14_fu_433_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_16_fu_436_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_1_fu_442_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component ws2812_led IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        led_V : IN STD_LOGIC_VECTOR (23 downto 0);
        out_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_V_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_ws2812_led_fu_168 : component ws2812_led
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ws2812_led_fu_168_ap_start,
        ap_done => grp_ws2812_led_fu_168_ap_done,
        ap_idle => grp_ws2812_led_fu_168_ap_idle,
        ap_ready => grp_ws2812_led_fu_168_ap_ready,
        led_V => grp_ws2812_led_fu_168_led_V,
        out_V => grp_ws2812_led_fu_168_out_V,
        out_V_ap_vld => grp_ws2812_led_fu_168_out_V_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_ws2812_led_fu_168_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_ws2812_led_fu_168_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_reg_grp_ws2812_led_fu_168_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_ws2812_led_fu_168_ap_ready)) then 
                    ap_reg_grp_ws2812_led_fu_168_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    stream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_V_data_V_0_ack_out) and (ap_const_logic_1 = stream_V_data_V_0_vld_out))) then 
                                        stream_V_data_V_0_sel_rd <= not(stream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_V_data_V_0_ack_in))) then 
                                        stream_V_data_V_0_sel_wr <= not(stream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_V_data_V_0_ack_out) and (stream_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_V_data_V_0_vld_in) and (stream_V_data_V_0_state = ap_const_lv2_2)))) then 
                    stream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_V_data_V_0_vld_in) and (ap_const_logic_0 = stream_V_data_V_0_ack_out) and (stream_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_V_data_V_0_ack_out) and (stream_V_data_V_0_state = ap_const_lv2_1)))) then 
                    stream_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_V_data_V_0_vld_in) and (stream_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = stream_V_data_V_0_ack_out) and (stream_V_data_V_0_state = ap_const_lv2_1)) or ((stream_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = stream_V_data_V_0_vld_in) and (ap_const_logic_0 = stream_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = stream_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_V_data_V_0_ack_out)))))) then 
                    stream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_V_dest_V_0_vld_in) and (ap_const_logic_1 = stream_V_dest_V_0_ack_out) and (ap_const_lv2_3 = stream_V_dest_V_0_state)) or ((ap_const_logic_0 = stream_V_dest_V_0_vld_in) and (ap_const_lv2_2 = stream_V_dest_V_0_state)))) then 
                    stream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_V_dest_V_0_vld_in) and (ap_const_logic_0 = stream_V_dest_V_0_ack_out) and (ap_const_lv2_3 = stream_V_dest_V_0_state)) or ((ap_const_logic_0 = stream_V_dest_V_0_ack_out) and (ap_const_lv2_1 = stream_V_dest_V_0_state)))) then 
                    stream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_V_dest_V_0_vld_in) and (ap_const_lv2_2 = stream_V_dest_V_0_state)) or ((ap_const_logic_1 = stream_V_dest_V_0_ack_out) and (ap_const_lv2_1 = stream_V_dest_V_0_state)) or ((ap_const_lv2_3 = stream_V_dest_V_0_state) and not(((ap_const_logic_1 = stream_V_dest_V_0_vld_in) and (ap_const_logic_0 = stream_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = stream_V_dest_V_0_vld_in) and (ap_const_logic_1 = stream_V_dest_V_0_ack_out)))))) then 
                    stream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    stream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_V_last_V_0_ack_out) and (ap_const_logic_1 = stream_V_last_V_0_vld_out))) then 
                                        stream_V_last_V_0_sel_rd <= not(stream_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_V_last_V_0_ack_in))) then 
                                        stream_V_last_V_0_sel_wr <= not(stream_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_V_last_V_0_ack_out) and (ap_const_lv2_3 = stream_V_last_V_0_state)) or ((ap_const_logic_0 = stream_V_last_V_0_vld_in) and (ap_const_lv2_2 = stream_V_last_V_0_state)))) then 
                    stream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_V_last_V_0_vld_in) and (ap_const_logic_0 = stream_V_last_V_0_ack_out) and (ap_const_lv2_3 = stream_V_last_V_0_state)) or ((ap_const_logic_0 = stream_V_last_V_0_ack_out) and (ap_const_lv2_1 = stream_V_last_V_0_state)))) then 
                    stream_V_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_V_last_V_0_vld_in) and (ap_const_lv2_2 = stream_V_last_V_0_state)) or ((ap_const_logic_1 = stream_V_last_V_0_ack_out) and (ap_const_lv2_1 = stream_V_last_V_0_state)) or ((ap_const_lv2_3 = stream_V_last_V_0_state) and not(((ap_const_logic_1 = stream_V_last_V_0_vld_in) and (ap_const_logic_0 = stream_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = stream_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_V_last_V_0_ack_out)))))) then 
                    stream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (stream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_lv1_1 = odd_column_load_load_fu_183_p1))) then 
                i1_reg_135 <= ap_const_lv4_7;
            elsif (((grp_ws2812_led_fu_168_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_reg_135 <= i_3_reg_518;
            end if; 
        end if;
    end process;

    i2_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((ap_const_lv1_0 = odd_column_load_reg_482) and (ap_const_lv1_1 = exitcond1_fu_187_p2) and (ap_const_lv1_1 = tmp_last_V_reg_478)) or ((ap_const_lv1_1 = odd_column_load_reg_482) and (ap_const_lv1_1 = tmp_fu_297_p3) and (ap_const_lv1_1 = tmp_last_V_reg_478))))) then 
                i2_reg_146 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_452_p2))) then 
                i2_reg_146 <= i_5_fu_458_p2;
            end if; 
        end if;
    end process;

    i_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (stream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_lv1_0 = odd_column_load_load_fu_183_p1))) then 
                i_reg_124 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_ws2812_led_fu_168_ap_done = ap_const_logic_1))) then 
                i_reg_124 <= i_4_reg_490;
            end if; 
        end if;
    end process;

    odd_column_new_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond_fu_452_p2))) then 
                odd_column_new_reg_157 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (((ap_const_lv1_0 = odd_column_load_reg_482) and (ap_const_lv1_1 = exitcond1_fu_187_p2) and (ap_const_lv1_0 = tmp_last_V_reg_478)) or ((ap_const_lv1_1 = odd_column_load_reg_482) and (ap_const_lv1_1 = tmp_fu_297_p3) and (ap_const_lv1_0 = tmp_last_V_reg_478))))) then 
                odd_column_new_reg_157 <= tmp_s_fu_409_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = odd_column_load_reg_482) and (ap_const_lv1_0 = tmp_fu_297_p3))) then
                i_3_reg_518 <= i_3_fu_403_p2;
                    tmp_12_reg_508(8 downto 1) <= tmp_12_fu_387_p2(8 downto 1);
                tmp_15_reg_513 <= tmp_15_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = odd_column_load_reg_482))) then
                i_4_reg_490 <= i_4_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                odd_column <= odd_column_new_reg_157;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (stream_V_data_V_0_vld_out = ap_const_logic_1))) then
                odd_column_load_reg_482 <= odd_column;
                tmp_data_V_reg_470 <= stream_V_data_V_0_data_out;
                tmp_last_V_reg_478 <= stream_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_V_data_V_0_load_A)) then
                stream_V_data_V_0_payload_A <= stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_V_data_V_0_load_B)) then
                stream_V_data_V_0_payload_B <= stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_V_last_V_0_load_A)) then
                stream_V_last_V_0_payload_A <= stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_V_last_V_0_load_B)) then
                stream_V_last_V_0_payload_B <= stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_18_reg_533 <= tmp_18_fu_447_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = odd_column_load_reg_482) and (ap_const_lv1_0 = exitcond1_fu_187_p2))) then
                    tmp_30_reg_495(8 downto 1) <= tmp_30_fu_281_p2(8 downto 1);
                tmp_33_reg_500 <= tmp_33_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_36_reg_528 <= tmp_36_fu_428_p1;
            end if;
        end if;
    end process;
    tmp_30_reg_495(0) <= '0';
    tmp_12_reg_508(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_V_data_V_0_vld_out, ap_CS_fsm_state2, tmp_last_V_reg_478, odd_column_load_reg_482, ap_CS_fsm_state3, exitcond1_fu_187_p2, tmp_fu_297_p3, ap_CS_fsm_state8, grp_ws2812_led_fu_168_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state7, exitcond_fu_452_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (stream_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((ap_const_lv1_0 = odd_column_load_reg_482) and (ap_const_lv1_1 = exitcond1_fu_187_p2) and (ap_const_lv1_1 = tmp_last_V_reg_478)) or ((ap_const_lv1_1 = odd_column_load_reg_482) and (ap_const_lv1_1 = tmp_fu_297_p3) and (ap_const_lv1_1 = tmp_last_V_reg_478))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (((ap_const_lv1_0 = odd_column_load_reg_482) and (ap_const_lv1_1 = exitcond1_fu_187_p2) and (ap_const_lv1_0 = tmp_last_V_reg_478)) or ((ap_const_lv1_1 = odd_column_load_reg_482) and (ap_const_lv1_1 = tmp_fu_297_p3) and (ap_const_lv1_0 = tmp_last_V_reg_478))))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = odd_column_load_reg_482) and (ap_const_lv1_0 = tmp_fu_297_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_ws2812_led_fu_168_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_ws2812_led_fu_168_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond_fu_452_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    Hi_assign_2_fu_317_p2 <= (Lo_assign_2_fu_309_p3 or ap_const_lv8_17);
    Hi_assign_fu_211_p2 <= (Lo_assign_fu_203_p3 or ap_const_lv8_17);
    Lo_assign_2_fu_309_p3 <= (tmp_1_fu_305_p1 & ap_const_lv5_0);
    Lo_assign_fu_203_p3 <= (tmp_19_fu_199_p1 & ap_const_lv5_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_187_p2 <= "1" when (i_reg_124 = ap_const_lv4_8) else "0";
    exitcond_fu_452_p2 <= "1" when (i2_reg_146 = ap_const_lv13_1388) else "0";
    grp_ws2812_led_fu_168_ap_start <= ap_reg_grp_ws2812_led_fu_168_ap_start;

    grp_ws2812_led_fu_168_led_V_assign_proc : process(tmp_36_reg_528, tmp_18_reg_533, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_ws2812_led_fu_168_led_V <= tmp_18_reg_533;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_ws2812_led_fu_168_led_V <= tmp_36_reg_528;
        else 
            grp_ws2812_led_fu_168_led_V <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_3_fu_403_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(i1_reg_135));
    i_4_fu_193_p2 <= std_logic_vector(unsigned(i_reg_124) + unsigned(ap_const_lv4_1));
    i_5_fu_458_p2 <= std_logic_vector(unsigned(i2_reg_146) + unsigned(ap_const_lv13_1));
    odd_column_load_load_fu_183_p1 <= odd_column;

    out_V_assign_proc : process(ap_CS_fsm_state8, grp_ws2812_led_fu_168_out_V, grp_ws2812_led_fu_168_out_V_ap_vld, ap_CS_fsm_state5, ap_CS_fsm_state7, exitcond_fu_452_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_452_p2))) then 
            out_V <= ap_const_lv1_0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = grp_ws2812_led_fu_168_out_V_ap_vld)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = grp_ws2812_led_fu_168_out_V_ap_vld)))) then 
            out_V <= grp_ws2812_led_fu_168_out_V;
        else 
            out_V <= ap_const_lv1_0;
        end if; 
    end process;

    p_Result_1_fu_442_p2 <= (tmp_15_reg_513 and tmp_16_fu_436_p2);
    p_Result_s_fu_423_p2 <= (tmp_33_reg_500 and tmp_34_fu_417_p2);

    stream_TDATA_blk_n_assign_proc : process(stream_V_data_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            stream_TDATA_blk_n <= stream_V_data_V_0_state(0);
        else 
            stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_TREADY <= stream_V_dest_V_0_state(1);
    stream_V_data_V_0_ack_in <= stream_V_data_V_0_state(1);

    stream_V_data_V_0_ack_out_assign_proc : process(stream_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (stream_V_data_V_0_vld_out = ap_const_logic_1))) then 
            stream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_V_data_V_0_data_out_assign_proc : process(stream_V_data_V_0_payload_A, stream_V_data_V_0_payload_B, stream_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = stream_V_data_V_0_sel)) then 
            stream_V_data_V_0_data_out <= stream_V_data_V_0_payload_B;
        else 
            stream_V_data_V_0_data_out <= stream_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_V_data_V_0_load_A <= (stream_V_data_V_0_state_cmp_full and not(stream_V_data_V_0_sel_wr));
    stream_V_data_V_0_load_B <= (stream_V_data_V_0_sel_wr and stream_V_data_V_0_state_cmp_full);
    stream_V_data_V_0_sel <= stream_V_data_V_0_sel_rd;
    stream_V_data_V_0_state_cmp_full <= '0' when (stream_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_V_data_V_0_vld_in <= stream_TVALID;
    stream_V_data_V_0_vld_out <= stream_V_data_V_0_state(0);

    stream_V_dest_V_0_ack_out_assign_proc : process(stream_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (stream_V_data_V_0_vld_out = ap_const_logic_1))) then 
            stream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    stream_V_dest_V_0_vld_in <= stream_TVALID;
    stream_V_last_V_0_ack_in <= stream_V_last_V_0_state(1);

    stream_V_last_V_0_ack_out_assign_proc : process(stream_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (stream_V_data_V_0_vld_out = ap_const_logic_1))) then 
            stream_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_V_last_V_0_data_out_assign_proc : process(stream_V_last_V_0_payload_A, stream_V_last_V_0_payload_B, stream_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = stream_V_last_V_0_sel)) then 
            stream_V_last_V_0_data_out <= stream_V_last_V_0_payload_B;
        else 
            stream_V_last_V_0_data_out <= stream_V_last_V_0_payload_A;
        end if; 
    end process;

    stream_V_last_V_0_load_A <= (stream_V_last_V_0_state_cmp_full and not(stream_V_last_V_0_sel_wr));
    stream_V_last_V_0_load_B <= (stream_V_last_V_0_sel_wr and stream_V_last_V_0_state_cmp_full);
    stream_V_last_V_0_sel <= stream_V_last_V_0_sel_rd;
    stream_V_last_V_0_state_cmp_full <= '0' when (stream_V_last_V_0_state = ap_const_lv2_1) else '1';
    stream_V_last_V_0_vld_in <= stream_TVALID;
    stream_V_last_V_0_vld_out <= stream_V_last_V_0_state(0);
    tmp_10_fu_372_p3 <= 
        tmp_5_fu_337_p4 when (tmp_2_fu_323_p2(0) = '1') else 
        tmp_data_V_reg_470;
    tmp_11_fu_379_p3 <= 
        tmp_7_fu_352_p2 when (tmp_2_fu_323_p2(0) = '1') else 
        tmp_3_fu_329_p1;
    tmp_12_fu_387_p2 <= std_logic_vector(unsigned(ap_const_lv9_FF) - unsigned(tmp_9_fu_364_p3));
    tmp_13_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_379_p3),256));
    tmp_14_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_508),256));
    tmp_15_fu_397_p2 <= std_logic_vector(shift_right(unsigned(tmp_10_fu_372_p3),to_integer(unsigned('0' & tmp_13_fu_393_p1(31-1 downto 0)))));
    tmp_16_fu_436_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv256_lc_1),to_integer(unsigned('0' & tmp_14_fu_433_p1(31-1 downto 0)))));
    tmp_18_fu_447_p1 <= p_Result_1_fu_442_p2(24 - 1 downto 0);
    tmp_19_fu_199_p1 <= i_reg_124(3 - 1 downto 0);
    tmp_1_fu_305_p1 <= i1_reg_135(3 - 1 downto 0);
    tmp_20_fu_217_p2 <= "1" when (unsigned(Lo_assign_fu_203_p3) > unsigned(Hi_assign_fu_211_p2)) else "0";
    tmp_21_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_203_p3),9));
    tmp_22_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_fu_211_p2),9));
    
    tmp_23_fu_231_p4_proc : process(tmp_data_V_reg_470)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_23_fu_231_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_FF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := tmp_data_V_reg_470;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_FF(8-1 downto 0)));
            for tmp_23_fu_231_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_23_fu_231_p4_i) := tmp_data_V_reg_470(256-1-tmp_23_fu_231_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_23_fu_231_p4 <= resvalue(256-1 downto 0);
    end process;

    tmp_24_fu_240_p2 <= std_logic_vector(unsigned(tmp_21_fu_223_p1) - unsigned(tmp_22_fu_227_p1));
    tmp_25_fu_246_p2 <= (tmp_21_fu_223_p1 xor ap_const_lv9_FF);
    tmp_26_fu_252_p2 <= std_logic_vector(unsigned(tmp_22_fu_227_p1) - unsigned(tmp_21_fu_223_p1));
    tmp_27_fu_258_p3 <= 
        tmp_24_fu_240_p2 when (tmp_20_fu_217_p2(0) = '1') else 
        tmp_26_fu_252_p2;
    tmp_28_fu_266_p3 <= 
        tmp_23_fu_231_p4 when (tmp_20_fu_217_p2(0) = '1') else 
        tmp_data_V_reg_470;
    tmp_29_fu_273_p3 <= 
        tmp_25_fu_246_p2 when (tmp_20_fu_217_p2(0) = '1') else 
        tmp_21_fu_223_p1;
    tmp_2_fu_323_p2 <= "1" when (unsigned(Lo_assign_2_fu_309_p3) > unsigned(Hi_assign_2_fu_317_p2)) else "0";
    tmp_30_fu_281_p2 <= std_logic_vector(unsigned(ap_const_lv9_FF) - unsigned(tmp_27_fu_258_p3));
    tmp_31_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_273_p3),256));
    tmp_32_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_495),256));
    tmp_33_fu_291_p2 <= std_logic_vector(shift_right(unsigned(tmp_28_fu_266_p3),to_integer(unsigned('0' & tmp_31_fu_287_p1(31-1 downto 0)))));
    tmp_34_fu_417_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv256_lc_1),to_integer(unsigned('0' & tmp_32_fu_414_p1(31-1 downto 0)))));
    tmp_36_fu_428_p1 <= p_Result_s_fu_423_p2(24 - 1 downto 0);
    tmp_3_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_2_fu_309_p3),9));
    tmp_4_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_2_fu_317_p2),9));
    
    tmp_5_fu_337_p4_proc : process(tmp_data_V_reg_470)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_5_fu_337_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_FF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := tmp_data_V_reg_470;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_FF(8-1 downto 0)));
            for tmp_5_fu_337_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_5_fu_337_p4_i) := tmp_data_V_reg_470(256-1-tmp_5_fu_337_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_337_p4 <= resvalue(256-1 downto 0);
    end process;

    tmp_6_fu_346_p2 <= std_logic_vector(unsigned(tmp_3_fu_329_p1) - unsigned(tmp_4_fu_333_p1));
    tmp_7_fu_352_p2 <= (tmp_3_fu_329_p1 xor ap_const_lv9_FF);
    tmp_8_fu_358_p2 <= std_logic_vector(unsigned(tmp_4_fu_333_p1) - unsigned(tmp_3_fu_329_p1));
    tmp_9_fu_364_p3 <= 
        tmp_6_fu_346_p2 when (tmp_2_fu_323_p2(0) = '1') else 
        tmp_8_fu_358_p2;
    tmp_fu_297_p3 <= i1_reg_135(3 downto 3);
    tmp_s_fu_409_p2 <= (odd_column_load_reg_482 xor ap_const_lv1_1);
end behav;
