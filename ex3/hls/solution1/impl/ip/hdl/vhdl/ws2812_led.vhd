-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ws2812_led is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    led_V : IN STD_LOGIC_VECTOR (23 downto 0);
    out_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ws2812_led is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv7_55 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";
    constant ap_const_lv7_28 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_const_lv7_7D : STD_LOGIC_VECTOR (6 downto 0) := "1111101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_81_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_i_cast_fu_104_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_i_cast_reg_143 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_75_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_118_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_reg_53 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_i_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_64 : STD_LOGIC_VECTOR (6 downto 0);
    signal bvh_d_index_fu_87_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_assign_cast_fu_93_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_97_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_i_fu_112_p2))) then 
                i_i_reg_64 <= i_2_fu_118_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_75_p2 = ap_const_lv1_0))) then 
                i_i_reg_64 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_53_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_fu_112_p2 = ap_const_lv1_1))) then 
                i_reg_53 <= i_1_reg_138;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_53 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_138 <= i_1_fu_81_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_75_p2 = ap_const_lv1_0))) then
                    p_i_cast_reg_143(0) <= p_i_cast_fu_104_p3(0);    p_i_cast_reg_143(6 downto 2) <= p_i_cast_fu_104_p3(6 downto 2);
            end if;
        end if;
    end process;
    p_i_cast_reg_143(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_75_p2, ap_CS_fsm_state3, exitcond_i_fu_112_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_75_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_fu_112_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_75_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_75_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_75_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_75_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bvh_d_index_fu_87_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(i_reg_53));
    exitcond_fu_75_p2 <= "1" when (i_reg_53 = ap_const_lv5_18) else "0";
    exitcond_i_fu_112_p2 <= "1" when (i_i_reg_64 = ap_const_lv7_7D) else "0";
    i_1_fu_81_p2 <= std_logic_vector(unsigned(i_reg_53) + unsigned(ap_const_lv5_1));
    i_2_fu_118_p2 <= std_logic_vector(unsigned(i_i_reg_64) + unsigned(ap_const_lv7_1));
    index_assign_cast_fu_93_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_fu_87_p2),32));
    out_V <= "1" when (unsigned(i_i_reg_64) < unsigned(p_i_cast_reg_143)) else "0";

    out_V_ap_vld_assign_proc : process(ap_CS_fsm_state3, exitcond_i_fu_112_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_i_fu_112_p2))) then 
            out_V_ap_vld <= ap_const_logic_1;
        else 
            out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_i_cast_fu_104_p3 <= 
        ap_const_lv7_55 when (tmp_fu_97_p3(0) = '1') else 
        ap_const_lv7_28;
    tmp_fu_97_p3 <= led_V(to_integer(unsigned(index_assign_cast_fu_93_p1)) downto to_integer(unsigned(index_assign_cast_fu_93_p1))) when (to_integer(unsigned(index_assign_cast_fu_93_p1))>= 0 and to_integer(unsigned(index_assign_cast_fu_93_p1))<=23) else "-";
end behav;
