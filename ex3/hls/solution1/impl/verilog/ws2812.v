// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ws2812,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.856000,HLS_SYN_LAT=26920,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3973,HLS_SYN_LUT=5318}" *)

module ws2812 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_TDATA,
        stream_TVALID,
        stream_TREADY,
        stream_TKEEP,
        stream_TSTRB,
        stream_TUSER,
        stream_TLAST,
        stream_TID,
        stream_TDEST,
        out_V
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] stream_TDATA;
input   stream_TVALID;
output   stream_TREADY;
input  [31:0] stream_TKEEP;
input  [31:0] stream_TSTRB;
input  [0:0] stream_TUSER;
input  [0:0] stream_TLAST;
input  [0:0] stream_TID;
input  [0:0] stream_TDEST;
output  [0:0] out_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] out_V;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [255:0] stream_V_data_V_0_data_out;
wire    stream_V_data_V_0_vld_in;
wire    stream_V_data_V_0_vld_out;
wire    stream_V_data_V_0_ack_in;
reg    stream_V_data_V_0_ack_out;
reg   [255:0] stream_V_data_V_0_payload_A;
reg   [255:0] stream_V_data_V_0_payload_B;
reg    stream_V_data_V_0_sel_rd;
reg    stream_V_data_V_0_sel_wr;
wire    stream_V_data_V_0_sel;
wire    stream_V_data_V_0_load_A;
wire    stream_V_data_V_0_load_B;
reg   [1:0] stream_V_data_V_0_state;
wire    stream_V_data_V_0_state_cmp_full;
reg   [0:0] stream_V_last_V_0_data_out;
wire    stream_V_last_V_0_vld_in;
wire    stream_V_last_V_0_vld_out;
wire    stream_V_last_V_0_ack_in;
reg    stream_V_last_V_0_ack_out;
reg   [0:0] stream_V_last_V_0_payload_A;
reg   [0:0] stream_V_last_V_0_payload_B;
reg    stream_V_last_V_0_sel_rd;
reg    stream_V_last_V_0_sel_wr;
wire    stream_V_last_V_0_sel;
wire    stream_V_last_V_0_load_A;
wire    stream_V_last_V_0_load_B;
reg   [1:0] stream_V_last_V_0_state;
wire    stream_V_last_V_0_state_cmp_full;
wire    stream_V_dest_V_0_vld_in;
reg    stream_V_dest_V_0_ack_out;
reg   [1:0] stream_V_dest_V_0_state;
reg   [0:0] odd_column;
reg    stream_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg   [255:0] tmp_data_V_reg_470;
reg   [0:0] tmp_last_V_reg_478;
wire   [0:0] odd_column_load_load_fu_183_p1;
reg   [0:0] odd_column_load_reg_482;
wire   [3:0] i_4_fu_193_p2;
reg   [3:0] i_4_reg_490;
wire    ap_CS_fsm_state3;
wire   [8:0] tmp_30_fu_281_p2;
reg   [8:0] tmp_30_reg_495;
wire   [0:0] exitcond1_fu_187_p2;
wire   [255:0] tmp_33_fu_291_p2;
reg   [255:0] tmp_33_reg_500;
wire   [8:0] tmp_12_fu_387_p2;
reg   [8:0] tmp_12_reg_508;
wire   [0:0] tmp_fu_297_p3;
wire   [255:0] tmp_15_fu_397_p2;
reg   [255:0] tmp_15_reg_513;
wire   [3:0] i_3_fu_403_p2;
reg   [3:0] i_3_reg_518;
wire   [0:0] tmp_s_fu_409_p2;
wire   [23:0] tmp_36_fu_428_p1;
reg   [23:0] tmp_36_reg_528;
wire    ap_CS_fsm_state4;
wire   [23:0] tmp_18_fu_447_p1;
reg   [23:0] tmp_18_reg_533;
wire    ap_CS_fsm_state6;
wire   [12:0] i_5_fu_458_p2;
wire    ap_CS_fsm_state8;
wire    grp_ws2812_led_fu_168_ap_start;
wire    grp_ws2812_led_fu_168_ap_done;
wire    grp_ws2812_led_fu_168_ap_idle;
wire    grp_ws2812_led_fu_168_ap_ready;
reg   [23:0] grp_ws2812_led_fu_168_led_V;
wire   [0:0] grp_ws2812_led_fu_168_out_V;
wire    grp_ws2812_led_fu_168_out_V_ap_vld;
reg   [3:0] i_reg_124;
wire    ap_CS_fsm_state5;
reg   [3:0] i1_reg_135;
wire    ap_CS_fsm_state7;
reg   [12:0] i2_reg_146;
wire   [0:0] exitcond_fu_452_p2;
reg   [0:0] odd_column_new_reg_157;
reg    ap_reg_grp_ws2812_led_fu_168_ap_start;
wire    ap_CS_fsm_state9;
wire   [2:0] tmp_19_fu_199_p1;
wire   [7:0] Lo_assign_fu_203_p3;
wire   [7:0] Hi_assign_fu_211_p2;
wire   [8:0] tmp_21_fu_223_p1;
wire   [8:0] tmp_22_fu_227_p1;
wire   [0:0] tmp_20_fu_217_p2;
wire   [8:0] tmp_24_fu_240_p2;
wire   [8:0] tmp_26_fu_252_p2;
reg   [255:0] tmp_23_fu_231_p4;
wire   [8:0] tmp_25_fu_246_p2;
wire   [8:0] tmp_27_fu_258_p3;
wire   [8:0] tmp_29_fu_273_p3;
wire   [255:0] tmp_28_fu_266_p3;
wire   [255:0] tmp_31_fu_287_p1;
wire   [2:0] tmp_1_fu_305_p1;
wire   [7:0] Lo_assign_2_fu_309_p3;
wire   [7:0] Hi_assign_2_fu_317_p2;
wire   [8:0] tmp_3_fu_329_p1;
wire   [8:0] tmp_4_fu_333_p1;
wire   [0:0] tmp_2_fu_323_p2;
wire   [8:0] tmp_6_fu_346_p2;
wire   [8:0] tmp_8_fu_358_p2;
reg   [255:0] tmp_5_fu_337_p4;
wire   [8:0] tmp_7_fu_352_p2;
wire   [8:0] tmp_9_fu_364_p3;
wire   [8:0] tmp_11_fu_379_p3;
wire   [255:0] tmp_10_fu_372_p3;
wire   [255:0] tmp_13_fu_393_p1;
wire   [255:0] tmp_32_fu_414_p1;
wire   [255:0] tmp_34_fu_417_p2;
wire   [255:0] p_Result_s_fu_423_p2;
wire   [255:0] tmp_14_fu_433_p1;
wire   [255:0] tmp_16_fu_436_p2;
wire   [255:0] p_Result_1_fu_442_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 stream_V_data_V_0_sel_rd = 1'b0;
#0 stream_V_data_V_0_sel_wr = 1'b0;
#0 stream_V_data_V_0_state = 2'd0;
#0 stream_V_last_V_0_sel_rd = 1'b0;
#0 stream_V_last_V_0_sel_wr = 1'b0;
#0 stream_V_last_V_0_state = 2'd0;
#0 stream_V_dest_V_0_state = 2'd0;
#0 odd_column = 1'd0;
#0 ap_reg_grp_ws2812_led_fu_168_ap_start = 1'b0;
end

ws2812_led grp_ws2812_led_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ws2812_led_fu_168_ap_start),
    .ap_done(grp_ws2812_led_fu_168_ap_done),
    .ap_idle(grp_ws2812_led_fu_168_ap_idle),
    .ap_ready(grp_ws2812_led_fu_168_ap_ready),
    .led_V(grp_ws2812_led_fu_168_led_V),
    .out_V(grp_ws2812_led_fu_168_out_V),
    .out_V_ap_vld(grp_ws2812_led_fu_168_out_V_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_ws2812_led_fu_168_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
            ap_reg_grp_ws2812_led_fu_168_ap_start <= 1'b1;
        end else if ((1'b1 == grp_ws2812_led_fu_168_ap_ready)) begin
            ap_reg_grp_ws2812_led_fu_168_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_V_data_V_0_ack_out) & (1'b1 == stream_V_data_V_0_vld_out))) begin
            stream_V_data_V_0_sel_rd <= ~stream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_V_data_V_0_vld_in) & (1'b1 == stream_V_data_V_0_ack_in))) begin
            stream_V_data_V_0_sel_wr <= ~stream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_V_data_V_0_vld_in) & (1'b1 == stream_V_data_V_0_ack_out) & (stream_V_data_V_0_state == 2'd3)) | ((1'b0 == stream_V_data_V_0_vld_in) & (stream_V_data_V_0_state == 2'd2)))) begin
            stream_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == stream_V_data_V_0_vld_in) & (1'b0 == stream_V_data_V_0_ack_out) & (stream_V_data_V_0_state == 2'd3)) | ((1'b0 == stream_V_data_V_0_ack_out) & (stream_V_data_V_0_state == 2'd1)))) begin
            stream_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == stream_V_data_V_0_vld_in) & (stream_V_data_V_0_state == 2'd2)) | ((1'b1 == stream_V_data_V_0_ack_out) & (stream_V_data_V_0_state == 2'd1)) | ((stream_V_data_V_0_state == 2'd3) & ~((1'b1 == stream_V_data_V_0_vld_in) & (1'b0 == stream_V_data_V_0_ack_out)) & ~((1'b0 == stream_V_data_V_0_vld_in) & (1'b1 == stream_V_data_V_0_ack_out))))) begin
            stream_V_data_V_0_state <= 2'd3;
        end else begin
            stream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_V_dest_V_0_vld_in) & (1'b1 == stream_V_dest_V_0_ack_out) & (2'd3 == stream_V_dest_V_0_state)) | ((1'b0 == stream_V_dest_V_0_vld_in) & (2'd2 == stream_V_dest_V_0_state)))) begin
            stream_V_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == stream_V_dest_V_0_vld_in) & (1'b0 == stream_V_dest_V_0_ack_out) & (2'd3 == stream_V_dest_V_0_state)) | ((1'b0 == stream_V_dest_V_0_ack_out) & (2'd1 == stream_V_dest_V_0_state)))) begin
            stream_V_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == stream_V_dest_V_0_vld_in) & (2'd2 == stream_V_dest_V_0_state)) | ((1'b1 == stream_V_dest_V_0_ack_out) & (2'd1 == stream_V_dest_V_0_state)) | ((2'd3 == stream_V_dest_V_0_state) & ~((1'b1 == stream_V_dest_V_0_vld_in) & (1'b0 == stream_V_dest_V_0_ack_out)) & ~((1'b0 == stream_V_dest_V_0_vld_in) & (1'b1 == stream_V_dest_V_0_ack_out))))) begin
            stream_V_dest_V_0_state <= 2'd3;
        end else begin
            stream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_V_last_V_0_ack_out) & (1'b1 == stream_V_last_V_0_vld_out))) begin
            stream_V_last_V_0_sel_rd <= ~stream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_V_last_V_0_vld_in) & (1'b1 == stream_V_last_V_0_ack_in))) begin
            stream_V_last_V_0_sel_wr <= ~stream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_V_last_V_0_vld_in) & (1'b1 == stream_V_last_V_0_ack_out) & (2'd3 == stream_V_last_V_0_state)) | ((1'b0 == stream_V_last_V_0_vld_in) & (2'd2 == stream_V_last_V_0_state)))) begin
            stream_V_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == stream_V_last_V_0_vld_in) & (1'b0 == stream_V_last_V_0_ack_out) & (2'd3 == stream_V_last_V_0_state)) | ((1'b0 == stream_V_last_V_0_ack_out) & (2'd1 == stream_V_last_V_0_state)))) begin
            stream_V_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == stream_V_last_V_0_vld_in) & (2'd2 == stream_V_last_V_0_state)) | ((1'b1 == stream_V_last_V_0_ack_out) & (2'd1 == stream_V_last_V_0_state)) | ((2'd3 == stream_V_last_V_0_state) & ~((1'b1 == stream_V_last_V_0_vld_in) & (1'b0 == stream_V_last_V_0_ack_out)) & ~((1'b0 == stream_V_last_V_0_vld_in) & (1'b1 == stream_V_last_V_0_ack_out))))) begin
            stream_V_last_V_0_state <= 2'd3;
        end else begin
            stream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (stream_V_data_V_0_vld_out == 1'b1) & (1'd1 == odd_column_load_load_fu_183_p1))) begin
        i1_reg_135 <= 4'd7;
    end else if (((grp_ws2812_led_fu_168_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        i1_reg_135 <= i_3_reg_518;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((1'd0 == odd_column_load_reg_482) & (1'd1 == exitcond1_fu_187_p2) & (1'd1 == tmp_last_V_reg_478)) | ((1'd1 == odd_column_load_reg_482) & (1'd1 == tmp_fu_297_p3) & (1'd1 == tmp_last_V_reg_478))))) begin
        i2_reg_146 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_452_p2))) begin
        i2_reg_146 <= i_5_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (stream_V_data_V_0_vld_out == 1'b1) & (1'd0 == odd_column_load_load_fu_183_p1))) begin
        i_reg_124 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_ws2812_led_fu_168_ap_done == 1'b1))) begin
        i_reg_124 <= i_4_reg_490;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_fu_452_p2))) begin
        odd_column_new_reg_157 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (((1'd0 == odd_column_load_reg_482) & (1'd1 == exitcond1_fu_187_p2) & (1'd0 == tmp_last_V_reg_478)) | ((1'd1 == odd_column_load_reg_482) & (1'd1 == tmp_fu_297_p3) & (1'd0 == tmp_last_V_reg_478))))) begin
        odd_column_new_reg_157 <= tmp_s_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == odd_column_load_reg_482) & (1'd0 == tmp_fu_297_p3))) begin
        i_3_reg_518 <= i_3_fu_403_p2;
        tmp_12_reg_508[8 : 1] <= tmp_12_fu_387_p2[8 : 1];
        tmp_15_reg_513 <= tmp_15_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == odd_column_load_reg_482))) begin
        i_4_reg_490 <= i_4_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        odd_column <= odd_column_new_reg_157;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (stream_V_data_V_0_vld_out == 1'b1))) begin
        odd_column_load_reg_482 <= odd_column;
        tmp_data_V_reg_470 <= stream_V_data_V_0_data_out;
        tmp_last_V_reg_478 <= stream_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_V_data_V_0_load_A)) begin
        stream_V_data_V_0_payload_A <= stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_V_data_V_0_load_B)) begin
        stream_V_data_V_0_payload_B <= stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_V_last_V_0_load_A)) begin
        stream_V_last_V_0_payload_A <= stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_V_last_V_0_load_B)) begin
        stream_V_last_V_0_payload_B <= stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_18_reg_533 <= tmp_18_fu_447_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == odd_column_load_reg_482) & (1'd0 == exitcond1_fu_187_p2))) begin
        tmp_30_reg_495[8 : 1] <= tmp_30_fu_281_p2[8 : 1];
        tmp_33_reg_500 <= tmp_33_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_36_reg_528 <= tmp_36_fu_428_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_ws2812_led_fu_168_led_V = tmp_18_reg_533;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_ws2812_led_fu_168_led_V = tmp_36_reg_528;
    end else begin
        grp_ws2812_led_fu_168_led_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_452_p2))) begin
        out_V = 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_state5) & (1'b1 == grp_ws2812_led_fu_168_out_V_ap_vld)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == grp_ws2812_led_fu_168_out_V_ap_vld)))) begin
        out_V = grp_ws2812_led_fu_168_out_V;
    end else begin
        out_V = 1'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        stream_TDATA_blk_n = stream_V_data_V_0_state[1'd0];
    end else begin
        stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (stream_V_data_V_0_vld_out == 1'b1))) begin
        stream_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_V_data_V_0_sel)) begin
        stream_V_data_V_0_data_out = stream_V_data_V_0_payload_B;
    end else begin
        stream_V_data_V_0_data_out = stream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (stream_V_data_V_0_vld_out == 1'b1))) begin
        stream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        stream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (stream_V_data_V_0_vld_out == 1'b1))) begin
        stream_V_last_V_0_ack_out = 1'b1;
    end else begin
        stream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_V_last_V_0_sel)) begin
        stream_V_last_V_0_data_out = stream_V_last_V_0_payload_B;
    end else begin
        stream_V_last_V_0_data_out = stream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (stream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (((1'd0 == odd_column_load_reg_482) & (1'd1 == exitcond1_fu_187_p2) & (1'd1 == tmp_last_V_reg_478)) | ((1'd1 == odd_column_load_reg_482) & (1'd1 == tmp_fu_297_p3) & (1'd1 == tmp_last_V_reg_478))))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state3) & (((1'd0 == odd_column_load_reg_482) & (1'd1 == exitcond1_fu_187_p2) & (1'd0 == tmp_last_V_reg_478)) | ((1'd1 == odd_column_load_reg_482) & (1'd1 == tmp_fu_297_p3) & (1'd0 == tmp_last_V_reg_478))))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == odd_column_load_reg_482) & (1'd0 == tmp_fu_297_p3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_ws2812_led_fu_168_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_ws2812_led_fu_168_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_fu_452_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_2_fu_317_p2 = (Lo_assign_2_fu_309_p3 | 8'd23);

assign Hi_assign_fu_211_p2 = (Lo_assign_fu_203_p3 | 8'd23);

assign Lo_assign_2_fu_309_p3 = {{tmp_1_fu_305_p1}, {5'd0}};

assign Lo_assign_fu_203_p3 = {{tmp_19_fu_199_p1}, {5'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_187_p2 = ((i_reg_124 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_452_p2 = ((i2_reg_146 == 13'd5000) ? 1'b1 : 1'b0);

assign grp_ws2812_led_fu_168_ap_start = ap_reg_grp_ws2812_led_fu_168_ap_start;

assign i_3_fu_403_p2 = ($signed(4'd15) + $signed(i1_reg_135));

assign i_4_fu_193_p2 = (i_reg_124 + 4'd1);

assign i_5_fu_458_p2 = (i2_reg_146 + 13'd1);

assign odd_column_load_load_fu_183_p1 = odd_column;

assign p_Result_1_fu_442_p2 = (tmp_15_reg_513 & tmp_16_fu_436_p2);

assign p_Result_s_fu_423_p2 = (tmp_33_reg_500 & tmp_34_fu_417_p2);

assign stream_TREADY = stream_V_dest_V_0_state[1'd1];

assign stream_V_data_V_0_ack_in = stream_V_data_V_0_state[1'd1];

assign stream_V_data_V_0_load_A = (stream_V_data_V_0_state_cmp_full & ~stream_V_data_V_0_sel_wr);

assign stream_V_data_V_0_load_B = (stream_V_data_V_0_sel_wr & stream_V_data_V_0_state_cmp_full);

assign stream_V_data_V_0_sel = stream_V_data_V_0_sel_rd;

assign stream_V_data_V_0_state_cmp_full = ((stream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_V_data_V_0_vld_in = stream_TVALID;

assign stream_V_data_V_0_vld_out = stream_V_data_V_0_state[1'd0];

assign stream_V_dest_V_0_vld_in = stream_TVALID;

assign stream_V_last_V_0_ack_in = stream_V_last_V_0_state[1'd1];

assign stream_V_last_V_0_load_A = (stream_V_last_V_0_state_cmp_full & ~stream_V_last_V_0_sel_wr);

assign stream_V_last_V_0_load_B = (stream_V_last_V_0_sel_wr & stream_V_last_V_0_state_cmp_full);

assign stream_V_last_V_0_sel = stream_V_last_V_0_sel_rd;

assign stream_V_last_V_0_state_cmp_full = ((stream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_V_last_V_0_vld_in = stream_TVALID;

assign stream_V_last_V_0_vld_out = stream_V_last_V_0_state[1'd0];

assign tmp_10_fu_372_p3 = ((tmp_2_fu_323_p2[0:0] === 1'b1) ? tmp_5_fu_337_p4 : tmp_data_V_reg_470);

assign tmp_11_fu_379_p3 = ((tmp_2_fu_323_p2[0:0] === 1'b1) ? tmp_7_fu_352_p2 : tmp_3_fu_329_p1);

assign tmp_12_fu_387_p2 = (9'd255 - tmp_9_fu_364_p3);

assign tmp_13_fu_393_p1 = tmp_11_fu_379_p3;

assign tmp_14_fu_433_p1 = tmp_12_reg_508;

assign tmp_15_fu_397_p2 = tmp_10_fu_372_p3 >> tmp_13_fu_393_p1;

assign tmp_16_fu_436_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> tmp_14_fu_433_p1;

assign tmp_18_fu_447_p1 = p_Result_1_fu_442_p2[23:0];

assign tmp_19_fu_199_p1 = i_reg_124[2:0];

assign tmp_1_fu_305_p1 = i1_reg_135[2:0];

assign tmp_20_fu_217_p2 = ((Lo_assign_fu_203_p3 > Hi_assign_fu_211_p2) ? 1'b1 : 1'b0);

assign tmp_21_fu_223_p1 = Lo_assign_fu_203_p3;

assign tmp_22_fu_227_p1 = Hi_assign_fu_211_p2;

integer ap_tvar_int_0;

always @ (tmp_data_V_reg_470) begin
    for (ap_tvar_int_0 = 256 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 255 - 0) begin
            tmp_23_fu_231_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_23_fu_231_p4[ap_tvar_int_0] = tmp_data_V_reg_470[255 - ap_tvar_int_0];
        end
    end
end

assign tmp_24_fu_240_p2 = (tmp_21_fu_223_p1 - tmp_22_fu_227_p1);

assign tmp_25_fu_246_p2 = (tmp_21_fu_223_p1 ^ 9'd255);

assign tmp_26_fu_252_p2 = (tmp_22_fu_227_p1 - tmp_21_fu_223_p1);

assign tmp_27_fu_258_p3 = ((tmp_20_fu_217_p2[0:0] === 1'b1) ? tmp_24_fu_240_p2 : tmp_26_fu_252_p2);

assign tmp_28_fu_266_p3 = ((tmp_20_fu_217_p2[0:0] === 1'b1) ? tmp_23_fu_231_p4 : tmp_data_V_reg_470);

assign tmp_29_fu_273_p3 = ((tmp_20_fu_217_p2[0:0] === 1'b1) ? tmp_25_fu_246_p2 : tmp_21_fu_223_p1);

assign tmp_2_fu_323_p2 = ((Lo_assign_2_fu_309_p3 > Hi_assign_2_fu_317_p2) ? 1'b1 : 1'b0);

assign tmp_30_fu_281_p2 = (9'd255 - tmp_27_fu_258_p3);

assign tmp_31_fu_287_p1 = tmp_29_fu_273_p3;

assign tmp_32_fu_414_p1 = tmp_30_reg_495;

assign tmp_33_fu_291_p2 = tmp_28_fu_266_p3 >> tmp_31_fu_287_p1;

assign tmp_34_fu_417_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> tmp_32_fu_414_p1;

assign tmp_36_fu_428_p1 = p_Result_s_fu_423_p2[23:0];

assign tmp_3_fu_329_p1 = Lo_assign_2_fu_309_p3;

assign tmp_4_fu_333_p1 = Hi_assign_2_fu_317_p2;

integer ap_tvar_int_1;

always @ (tmp_data_V_reg_470) begin
    for (ap_tvar_int_1 = 256 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 255 - 0) begin
            tmp_5_fu_337_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_5_fu_337_p4[ap_tvar_int_1] = tmp_data_V_reg_470[255 - ap_tvar_int_1];
        end
    end
end

assign tmp_6_fu_346_p2 = (tmp_3_fu_329_p1 - tmp_4_fu_333_p1);

assign tmp_7_fu_352_p2 = (tmp_3_fu_329_p1 ^ 9'd255);

assign tmp_8_fu_358_p2 = (tmp_4_fu_333_p1 - tmp_3_fu_329_p1);

assign tmp_9_fu_364_p3 = ((tmp_2_fu_323_p2[0:0] === 1'b1) ? tmp_6_fu_346_p2 : tmp_8_fu_358_p2);

assign tmp_fu_297_p3 = i1_reg_135[32'd3];

assign tmp_s_fu_409_p2 = (odd_column_load_reg_482 ^ 1'd1);

always @ (posedge ap_clk) begin
    tmp_30_reg_495[0] <= 1'b0;
    tmp_12_reg_508[0] <= 1'b0;
end

endmodule //ws2812
