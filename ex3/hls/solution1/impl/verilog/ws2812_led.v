// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ws2812_led (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        led_V,
        out_V,
        out_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] led_V;
output  [0:0] out_V;
output   out_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_1_fu_81_p2;
reg   [4:0] i_1_reg_138;
wire    ap_CS_fsm_state2;
wire   [6:0] p_i_cast_fu_104_p3;
reg   [6:0] p_i_cast_reg_143;
wire   [0:0] exitcond_fu_75_p2;
wire   [6:0] i_2_fu_118_p2;
wire    ap_CS_fsm_state3;
reg   [4:0] i_reg_53;
wire   [0:0] exitcond_i_fu_112_p2;
reg   [6:0] i_i_reg_64;
wire   [4:0] bvh_d_index_fu_87_p2;
wire   [31:0] index_assign_cast_fu_93_p1;
wire   [0:0] tmp_fu_97_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_i_fu_112_p2))) begin
        i_i_reg_64 <= i_2_fu_118_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_75_p2 == 1'd0))) begin
        i_i_reg_64 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_112_p2 == 1'd1))) begin
        i_reg_53 <= i_1_reg_138;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_53 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_138 <= i_1_fu_81_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_75_p2 == 1'd0))) begin
        p_i_cast_reg_143[0] <= p_i_cast_fu_104_p3[0];
p_i_cast_reg_143[6 : 2] <= p_i_cast_fu_104_p3[6 : 2];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_75_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_75_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_i_fu_112_p2))) begin
        out_V_ap_vld = 1'b1;
    end else begin
        out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_75_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_fu_112_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign bvh_d_index_fu_87_p2 = ($signed(5'd23) - $signed(i_reg_53));

assign exitcond_fu_75_p2 = ((i_reg_53 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_i_fu_112_p2 = ((i_i_reg_64 == 7'd125) ? 1'b1 : 1'b0);

assign i_1_fu_81_p2 = (i_reg_53 + 5'd1);

assign i_2_fu_118_p2 = (i_i_reg_64 + 7'd1);

assign index_assign_cast_fu_93_p1 = bvh_d_index_fu_87_p2;

assign out_V = ((i_i_reg_64 < p_i_cast_reg_143) ? 1'b1 : 1'b0);

assign p_i_cast_fu_104_p3 = ((tmp_fu_97_p3[0:0] === 1'b1) ? 7'd85 : 7'd40);

assign tmp_fu_97_p3 = led_V[index_assign_cast_fu_93_p1];

always @ (posedge ap_clk) begin
    p_i_cast_reg_143[1] <= 1'b0;
end

endmodule //ws2812_led
